import * as Location from "expo-location";
import { Alert, Platform } from "react-native";
import * as Linking from "expo-linking";

class LocationService {
  static permissionStatus = null;
  static fallbackLocation =
    "S205 Vinhome Grand Park, Qu·∫≠n 9, Th√†nh ph·ªë H·ªì Ch√≠ Minh";
  static lastKnownLocation = null;
  static locationCache = null;
  static cacheExpiry = null;
  static hasShownServicesAlert = false;

  /**
   * Check and request location permission with proper error handling
   * @param {boolean} showAlert - Whether to show alert if permission denied
   * @returns {Promise<boolean>} - Whether permission is granted
   */
  static async checkAndRequestPermission(showAlert = false) {
    try {
      console.log("üó∫Ô∏è Checking location permissions...");

      // First check current permission status
      const { status: currentStatus } =
        await Location.getForegroundPermissionsAsync();

      if (currentStatus === "granted") {
        console.log("üó∫Ô∏è Location permission already granted");
        this.permissionStatus = "granted";
        return true;
      }

      // Request permission if not granted
      const { status } = await Location.requestForegroundPermissionsAsync();
      this.permissionStatus = status;

      if (status === "granted") {
        console.log("üó∫Ô∏è Location permission granted");
        return true;
      } else {
        console.log("üó∫Ô∏è Location permission denied, using fallback location");

        if (showAlert) {
          this.showPermissionAlert();
        }

        return false;
      }
    } catch (error) {
      console.error("üó∫Ô∏è Error checking location permission:", error);
      this.permissionStatus = "error";
      return false;
    }
  }

  /**
   * Check if location services are enabled on the device
   * @returns {Promise<boolean>}
   */
  static async isLocationServicesEnabled() {
    try {
      const enabled = await Location.hasServicesEnabledAsync();
      console.log(`üó∫Ô∏è Location services enabled: ${enabled}`);
      return enabled;
    } catch (error) {
      console.error("üó∫Ô∏è Error checking location services:", error);
      return false;
    }
  }

  /**
   * Show user-friendly permission alert
   */
  static showPermissionAlert() {
    Alert.alert(
      "V·ªã tr√≠",
      "·ª®ng d·ª•ng s·∫Ω ho·∫°t ƒë·ªông t·ªët h∆°n n·∫øu b·∫°n cho ph√©p truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ t√¨m c√¥ng vi·ªác g·∫ßn b·∫°n. B·∫°n c√≥ th·ªÉ b·∫≠t t√≠nh nƒÉng n√†y trong C√†i ƒë·∫∑t sau.",
      [
        { text: "ƒê·ªÉ sau", style: "cancel" },
        {
          text: "C√†i ƒë·∫∑t",
          onPress: () => {
            if (Platform.OS === "android") {
              Linking.openSettings();
            } else {
              // For iOS, we can only guide users to settings
              Alert.alert(
                "H∆∞·ªõng d·∫´n",
                "V√†o C√†i ƒë·∫∑t > GigBuds > V·ªã tr√≠ ƒë·ªÉ b·∫≠t quy·ªÅn truy c·∫≠p v·ªã tr√≠.",
                [{ text: "OK" }]
              );
            }
          },
        },
      ]
    );
  }

  /**
   * Show location services disabled alert
   */
  static showLocationServicesAlert() {
    const message =
      Platform.OS === "android"
        ? "D·ªãch v·ª• ƒë·ªãnh v·ªã b·ªã t·∫Øt. V√†o C√†i ƒë·∫∑t > V·ªã tr√≠ ƒë·ªÉ b·∫≠t d·ªãch v·ª• ƒë·ªãnh v·ªã."
        : "D·ªãch v·ª• ƒë·ªãnh v·ªã b·ªã t·∫Øt. V√†o C√†i ƒë·∫∑t > Quy·ªÅn ri√™ng t∆∞ & B·∫£o m·∫≠t > D·ªãch v·ª• ƒë·ªãnh v·ªã ƒë·ªÉ b·∫≠t.";

    Alert.alert("D·ªãch v·ª• ƒë·ªãnh v·ªã b·ªã t·∫Øt", message, [
      { text: "ƒê·ªÉ sau", style: "cancel" },
      {
        text: "C√†i ƒë·∫∑t",
        onPress: () => {
          Linking.openSettings();
        },
      },
    ]);
  }

  /**
   * Get current location with fallback and caching
   * @param {Object} options - Location options
   * @returns {Promise<string>} - Current location address or fallback
   */
  static async getCurrentLocation(options = {}) {
    try {
      // Check cache first
      const now = Date.now();
      if (this.locationCache && this.cacheExpiry && now < this.cacheExpiry) {
        console.log("üó∫Ô∏è Using cached location:", this.locationCache);
        return this.locationCache;
      }

      // Check permission first
      const hasPermission = await this.checkAndRequestPermission();

      if (!hasPermission) {
        console.log("üó∫Ô∏è Using fallback location (no permission)");
        return this.fallbackLocation;
      }

      // Check if location services are enabled - enhanced check
      let servicesEnabled = false;
      try {
        servicesEnabled = await this.isLocationServicesEnabled();
        console.log(`üó∫Ô∏è Location services check result: ${servicesEnabled}`);
      } catch (servicesError) {
        console.log("üó∫Ô∏è Could not check location services, assuming disabled");
        servicesEnabled = false;
      }

      if (!servicesEnabled) {
        console.log("üó∫Ô∏è Location services disabled, using fallback location");

        // Show alert only once per session
        if (!this.hasShownServicesAlert) {
          setTimeout(() => {
            this.showLocationServicesAlert();
          }, 1000);
          this.hasShownServicesAlert = true;
        }

        return this.fallbackLocation;
      }

      const {
        accuracy = Location.Accuracy.Balanced,
        timeout = 8000, // Reduced timeout
        maximumAge = 300000, // 5 minutes cache
      } = options;

      console.log("üó∫Ô∏è Attempting to get current position...");

      // Get current position with enhanced timeout and error handling
      let location;
      try {
        location = await Promise.race([
          Location.getCurrentPositionAsync({
            accuracy,
            timeout,
            maximumAge,
          }),
          new Promise((_, reject) =>
            setTimeout(
              () => reject(new Error("Location timeout")),
              timeout + 1000
            )
          ),
        ]);
      } catch (locationError) {
        // Handle specific location errors
        const errorMessage = locationError.message.toLowerCase();

        if (
          errorMessage.includes("location services") ||
          errorMessage.includes("location is unavailable") ||
          errorMessage.includes("location service")
        ) {
          console.log(
            "üó∫Ô∏è Location services are disabled at system level, using fallback"
          );

          // Show services alert if not shown yet
          if (!this.hasShownServicesAlert) {
            setTimeout(() => {
              this.showLocationServicesAlert();
            }, 1000);
            this.hasShownServicesAlert = true;
          }

          return this.fallbackLocation;
        }

        // For other errors, just log and use fallback
        console.log("üó∫Ô∏è Location fetch failed, using fallback:", errorMessage);
        return this.fallbackLocation;
      }

      console.log("üó∫Ô∏è Got location coordinates:", {
        lat: location.coords.latitude,
        lng: location.coords.longitude,
      });

      // Reverse geocode to get address
      try {
        const reverseGeocode = await Location.reverseGeocodeAsync({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
        });

        if (reverseGeocode.length > 0) {
          const address = reverseGeocode[0];
          // Format Vietnamese address
          const formattedAddress = [
            address.streetNumber,
            address.street,
            address.district,
            address.city || address.region,
          ]
            .filter(Boolean)
            .join(", ");

          const finalAddress = formattedAddress || this.fallbackLocation;

          // Cache the result
          this.locationCache = finalAddress;
          this.cacheExpiry = now + (options.cacheTime || 300000); // 5 minutes default
          this.lastKnownLocation = finalAddress;

          console.log("üó∫Ô∏è Current location:", finalAddress);
          return finalAddress;
        }
      } catch (geocodeError) {
        console.log(
          "üó∫Ô∏è Reverse geocoding failed, using coordinates as fallback"
        );
        // Still cache coordinates-based location
        const coordsLocation = `${location.coords.latitude}, ${location.coords.longitude}`;
        this.locationCache = coordsLocation;
        this.cacheExpiry = now + (options.cacheTime || 300000);
        this.lastKnownLocation = coordsLocation;
        return coordsLocation;
      }

      console.log("üó∫Ô∏è No reverse geocode results, using fallback");
      return this.fallbackLocation;
    } catch (error) {
      // Suppress error logging to avoid console spam
      console.log("üó∫Ô∏è Using fallback location due to error");

      // Return last known location if available
      if (this.lastKnownLocation) {
        console.log("üó∫Ô∏è Using last known location:", this.lastKnownLocation);
        return this.lastKnownLocation;
      }

      // Fall back to default location
      return this.fallbackLocation;
    }
  }

  /**
   * Get location coordinates with fallback
   * @param {Object} options - Location options
   * @returns {Promise<Object>} - Location coordinates or null
   */
  static async getCurrentCoordinates(options = {}) {
    try {
      // Check permission first
      const hasPermission = await this.checkAndRequestPermission();

      if (!hasPermission) {
        console.log(
          "üó∫Ô∏è Location permission not available, returning null coordinates"
        );
        return null;
      }

      // Check if location services are enabled - enhanced check
      let servicesEnabled = false;
      try {
        servicesEnabled = await this.isLocationServicesEnabled();
      } catch (servicesError) {
        console.log("üó∫Ô∏è Could not check location services for coordinates");
        servicesEnabled = false;
      }

      if (!servicesEnabled) {
        console.log(
          "üó∫Ô∏è Location services disabled, returning null coordinates"
        );
        return null;
      }

      const {
        accuracy = Location.Accuracy.Balanced,
        timeout = 8000,
        maximumAge = 300000,
      } = options;

      // Get current position with enhanced error handling
      let location;
      try {
        location = await Promise.race([
          Location.getCurrentPositionAsync({
            accuracy,
            timeout,
            maximumAge,
          }),
          new Promise((_, reject) =>
            setTimeout(
              () => reject(new Error("Location timeout")),
              timeout + 1000
            )
          ),
        ]);
      } catch (locationError) {
        // Handle specific location errors silently
        const errorMessage = locationError.message.toLowerCase();

        if (
          errorMessage.includes("location services") ||
          errorMessage.includes("location is unavailable") ||
          errorMessage.includes("location service")
        ) {
          console.log(
            "üó∫Ô∏è Location services disabled at system level, returning null coordinates"
          );
          return null;
        }

        // For other errors, just return null
        console.log("üó∫Ô∏è Could not get coordinates, returning null");
        return null;
      }

      return {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
        accuracy: location.coords.accuracy,
      };
    } catch (error) {
      // Suppress error logging
      console.log("üó∫Ô∏è Coordinates unavailable, returning null");
      return null;
    }
  }

  /**
   * Check if location permission is granted without requesting
   * @returns {Promise<boolean>}
   */
  static async hasPermission() {
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      return status === "granted";
    } catch (error) {
      console.error("üó∫Ô∏è Error checking location permission status:", error);
      return false;
    }
  }

  /**
   * Get the fallback location
   * @returns {string}
   */
  static getFallbackLocation() {
    return this.fallbackLocation;
  }

  /**
   * Set a custom fallback location
   * @param {string} location
   */
  static setFallbackLocation(location) {
    this.fallbackLocation = location;
  }

  /**
   * Clear location cache
   */
  static clearCache() {
    this.locationCache = null;
    this.cacheExpiry = null;
    console.log("üó∫Ô∏è Location cache cleared");
  }

  /**
   * Get cached location if available
   * @returns {string|null}
   */
  static getCachedLocation() {
    const now = Date.now();
    if (this.locationCache && this.cacheExpiry && now < this.cacheExpiry) {
      return this.locationCache;
    }
    return null;
  }
}

export default LocationService;
